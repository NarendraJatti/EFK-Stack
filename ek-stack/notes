 https://github.com/kodekloudhub/efk-stack/tree/main
 
 Kubernetes supports various volume types such as PersistentVolumeClaim, hostPath, emptyDir, ConfigMap, and more.
volumes is a pod-level setting. It defines the storage that is available for the containers in that pod. Multiple containers in the same pod can share the same volume. volumeMounts is a container-level setting. It specifies how the volume should be attached to the container. You can define multiple volumeMounts per container, each mounting a different part of the storage.

How This Works:
PersistentVolumes (PVs) are tied to specific nodes using hostPath and node affinity.
PersistentVolumeClaims (PVCs) generated by the StatefulSet will bind to available PVs that match their criteria (like storage size and access mode).
Since each pod in the StatefulSet is scheduled on a different node due to node affinity, its associated PVC will bind to the PV on that node.
Thus, each Elasticsearch pod will have its data stored on the respective node’s local storage directory, managed by the PersistentVolume. This ensures separation of storage across nodes.

instrumenting metrics for the app
-----------------------------
On the Kubernetes host node, logs from containers are typically stored in /var/log/containers. Each log file inside this directory corresponds to a specific container running on the host, and they are usually in .log format.

Fluent Bit is running as a DaemonSet, which means there is one Fluent Bit pod per node. To access the log files stored on the host, you need to mount the host’s /var/log/containers directory inside the Fluent Bit container using volume mounts.

hostPath: /var/log/containers: This specifies the path on the host where the container logs are stored.
mountPath: /var/log/containers: This is where the host’s /var/log/containers directory is mounted inside the Fluent Bit container.

Path /var/log/containers/*.log: This tells Fluent Bit to read all log files (matching *.log) in the /var/log/containers/ directory, which are the log files from the host system.

The /var/log/containers/*.log path in Fluent Bit’s configuration corresponds to the container’s view of the log files, which are mounted from the host’s /var/log/containers directory into the same path inside the Fluent Bit container. This allows Fluent Bit to process and forward the logs generated by the containers running on the Kubernetes node.

Kubernetes Log Structure
In Kubernetes, container logs are usually located under two main directories on the host machine:

Container log directory: /var/lib/docker/containers/ (or another runtime-specific directory, depending on the container runtime like containerd, cri-o, etc.).
Symbolic links in /var/log/containers/: These links point to the actual log files in the above-mentioned directory.

Log File Location on the Host
Container logs are typically stored in /var/lib/docker/containers/ on the host (if Docker is the runtime) or another container-specific directory (e.g., /var/log/pods/ for containerd). Each container running on the host has a corresponding log file in this directory.
Symbolic Links in /var/log/containers
In Kubernetes, the /var/log/containers/ directory on the host holds symlinks to the actual log files located in /var/lib/docker/containers/ or /var/log/pods/ (depending on the runtime). The symlinks are created for easier access to logs by Fluent Bit or similar log aggregators.
Symbolic links: The /var/log/containers/ directory on the host contains symbolic links that point to the actual log files. For example, a symlink might be /var/log/containers/nginx-pod_namespace_nginx-container-abc123.log → /var/lib/docker/containers/abc123/abc123-json.log.

On the host machine:

The actual log is at /var/lib/docker/containers/abc123/abc123-json.log.
A symlink in /var/log/containers/nginx-pod_namespace_nginx-container-abc123.log points to /var/lib/docker/containers/abc123/abc123-json.log.
Inside the Fluent Bit container:

/var/log/containers/nginx-pod_namespace_nginx-container-abc123.log (mounted from the host) is a symbolic link.
Fluent Bit follows the symlink to /var/lib/docker/containers/abc123/abc123-json.log and reads the logs.
Conclusion:
/var/log/containers/ contains symbolic links to the actual log files.
The actual logs are stored under /var/lib/docker/containers/ or /var/log/pods/, depending on the container runtime.


Redirection of Container Logs
When a pod is running in Kubernetes, each container within the pod writes its logs to stdout and stderr. These logs are automatically redirected by the container runtime (Docker, containerd, or CRI-O) to a log file on the host node’s file system, such as /var/lib/docker/containers/.

Kubernetes does not directly manage logs at the container level. Instead, it relies on the container runtime to handle this process.
The container runtime captures all standard output (stdout) and standard error (stderr) streams from the container processes and stores them in these log files.
3. Pod Logging: How It’s Handled
Each pod consists of one or more containers, and each container’s log is captured separately.
The log files for containers in a pod are stored in a directory structure on the host, often under /var/lib/docker/containers/ or /var/log/pods/ depending on the runtime.
The logs in these directories are typically structured as:

For Docker: /var/lib/docker/containers/<container-id>/<container-id>-json.log
For containerd: /var/log/pods/<namespace>/<pod-name>/<container-name>-<container-id>.log
Kubernetes does not modify this process but instead interacts with it using symlinks or log drivers for easier access.

4. Symlinks in /var/log/containers/
To make it easier to access container logs, Kubernetes creates symbolic links in the /var/log/containers/ directory on the host. These symbolic links point to the actual log files stored in the container runtime’s directory, such as /var/lib/docker/containers/.

Example:
If a pod nginx-pod is running in the default namespace, and it has a container nginx-container, Kubernetes creates a symlink in /var/log/containers/ like this: